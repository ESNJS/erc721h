#define error Panic(uint256)

#define macro REVERT_SIG(zero) = takes(1) returns(0) {
  // takes:           [error_sig]
  <zero> mstore    // []
  0x04 0x1c revert // []
}

/* the remaining error sig is explicitly not popped, can be useful if chaining
 * multiple conditions into an AND-type conditional statement
 *
 * solidity: if (!(cond1 && cond2 && cond3)) revert MyCustomError()
 * huff, where cond<x> is an op that places condition at the top of stack:
 * __FUNC_SIG(MyCustomError)
 * cond1 REQUIRE(0x0)
 * cond2 REQUIRE(0x0)
 * cond3 REQUIRE(0x0)
 */
#define macro REQUIRE(zero) = takes (2) returns (1) {
  // takes:                              [condition, error_sig]
  __Utils_Misc__requireContinue jumpi // [error_sig]
  REVERT_SIG(<zero>)
  __Utils_Misc__requireContinue:      // [error_sig]
}

#define macro REQUIRE_NO_SIG(zero) = takes(1) returns(0) {
  // takes: [condition]
  __Utils_Misc__requireNoSigContinue jumpi
  <zero> <zero> revert
  __Utils_Misc__requireNoSigContinue:
}


/// @dev underflow safe subtraction with custom error (4-byte error sig only, no args)
#define macro SAFE_SUB(zero) = takes(3) returns(1) {
  // takes:          [error_sig, x, y]
  dup3 dup3       // [x, y, error_sig, x, y]
  lt iszero       // [x >= y, error_sig, x, y]
  REQUIRE(<zero>) // [error_sig, x, y]
  pop sub         // [x-y]
}


#define constant MASK_ADDR = 0xffffffffffffffffffffffffffffffffffffffff

#define macro REQUIRE_ADDR(zero) = takes(1) returns(0) {
  // takes:                    [addr_value]
  dup1 [MASK_ADDR] and      // [addr_value & MASK_ADDR, addr_value]
  eq REQUIRE_NO_SIG(<zero>) // []
}

/// @dev underflow safe subtraction which throws same error as solidity
#define macro SAFE_SUB_PANIC(zero) = takes(2) returns(1) {
  // takes:    [x, y]
  dup2 dup2 // [x, y, x, y]
  lt iszero // [x >= y, x, y]
  __Utils_Misc__safeSubContinue jumpi
  0x11 PANIC(<zero>)
  __Utils_Misc__safeSubContinue:
    sub     // [x - y]
}

#define macro SAFE_ADD_PANIC(zero) = takes(2) returns(1) {
  // takes: [x, y]
  dup2       // [y, x, y]
  add        // [y + x, y]
  swap1 dup2 // [y + x, y, y + x]
  lt iszero  // [y + x >= y, y + x]
  __Utils_Misc__safeAddContinue jumpi
  0x11 PANIC(<zero>)
  __Utils_Misc__safeAddContinue:
  //            [y + x]
}

#define macro NO_VALUE_CHECK(zero) = takes(0) returns(0) {
  callvalue iszero __Utils_Misc__valueCheckContinue jumpi
  <zero> <zero> revert
  __Utils_Misc__valueCheckContinue:
}

#define macro RETURN1(zero) = takes(1) returns(0) {
  // takes:        [value_to_return]
  <zero> mstore // []
  0x20 <zero> return
}

// Must be at the beginning of a contract to ensure RETURNDATASIZE is zero
#define macro GET_SELECTOR() = takes(0) returns(0) {
  returndatasize calldataload 0xE0 shr
}

#define macro PANIC(zero) = takes(1) returns(0) {
  // takes: [panic_code]
  __FUNC_SIG(Panic) <zero> mstore
  0x20 mstore
  0x24 0x1c revert
}

#define macro NOT_TERNARY() = takes(3) returns(1) {
  // takes:   [not_condition, x, y]
  __Utils_Misc__ternaryNoSwap jumpi
    swap1
  __Utils_Misc__ternaryNoSwap:
  pop
  // returns: [!not_condition ? x : y]
}

#define macro MAX() = takes(2) returns(1) {
  // takes:       [x, y]

  dup1 dup3 gt // [y > x, x, y]
  NOT_TERNARY()
  // returns:  [max(x, y)]
}

#define macro MIN() = takes(2) returns(1) {
  // takes:       [x, y]

  dup1 dup3 lt // [y < x, x, y]
  NOT_TERNARY()
  // returns:  [min(x, y)]
}


#define constant NEG1 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define macro SUB1() = takes(1) returns(1) {
  // takes:   [x]
  [NEG1] add
  // returns: [x-1]
}
