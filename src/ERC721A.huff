/// @title ERC721A
/// @author Philogy
/// @author bmwoolf
/// @notice A reusable base implementation of the ERC721A token contract written in Huff

/* Imports */
#include "./utils/HashMap.huff"

/* ERC721 Interface */

/* ERC721 Interface -- Events */
#define event Transfer(address, address, uint256)
#define event Approval(address, address, uint256)
#define event ApprovalForAll(address, address, bool)

/* ERC721 Interface -- Metadata */
#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function tokenURI(uint256) nonpayable returns (string)

/* ERC721 Interface -- Transfer */
#define function transferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256, bytes) nonpayable returns ()
// added sigs as constants to avoid having to use __FUNC_SIG("...")
#define constant NO_DATA_SAFE_TRANSFER_FROM_SIG = 0x42842e0e
#define constant DATA_SAFE_TRANSFER_FROM_SIG = 0xb88d4fde

/* ERC721 Interface -- Allowance */
#define function getApproved(uint256) view returns (address)
#define function isApprovedForAll(address, address) view returns (uint256)
#define function approve(address, uint256) nonpayable returns ()
#define function setApprovalForAll(address, bool) nonpayable returns ()

/* ERC721 Interface -- Ownership */
#define function ownerOf(uint256) view returns (address)
#define function balanceOf(address) view returns (uint256)

/* ERC165 */
#define function supportsInterface(bytes4) view returns (bool)

/* ERC721H */
#define constant ERC721H__START_TOKEN_ID = 0x0


/* Storage Layout */
// _currentIndex (size: 128, offset: 0) - The next token ID to be minted
// _burnCounter (size: 128, offset: 128) - Global amount of tokens burnt
#define constant ERC721H_SLOT__GLOBAL_INDICES = FREE_STORAGE_POINTER()

#define macro ERC721H_CONSTRUCTOR() = takes(0) returns(0) {
  [START_TOKEN_ID] [SLOT_GLOBAL_INDICES] sstore // _currentIndex = START_TOKEN_ID
}

#define macro ERC721H_SELECTOR_SWITCH(name, symbol, tokenURI, supportsInterface) = takes(1) returns(1) {
  // takes: [selector]
  dup1 __FUNC_SIG(setApprovalForAll)    eq __ERC721H__setApprovalForAll      jumpi
  dup1 [NO_DATA_SAFE_TRANSFER_FROM_SIG] eq __ERC721H__noDataSafeTransferFrom jumpi
  dup1 __FUNC_SIG(transferFrom)         eq __ERC721H__transferFrom           jumpi
  dup1 [DATA_SAFE_TRANSFER_FROM_SIG]    eq __ERC721H__dataSafeTransferFrom   jumpi

  __ERC721H__selectorSwitchEnd jump

  __ERC721H__setApprovalForAll:
  __ERC721H__noDataSafeTransferFrom:
  __ERC721H__transferFrom:
  __ERC721H__dataSafeTransferFrom:

  __ERC721H__selectorSwitchEnd:
}

// TODO: Remove, only to appease compiler
#define macro MAIN() = takes(0) returns(0) { }
