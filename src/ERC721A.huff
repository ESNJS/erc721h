/// @title ERC721A
/// @author Philogy
/// @author bmwoolf
/// @notice A reusable base implementation of the ERC721A token contract written in Huff

/* Imports */
#include "./utils/HashMap.huff"

/* ERC721 Interface */
/* ERC721 Interface -- Metadata */
#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function tokenURI(uint256) nonpayable returns (string)

/* ERC721 Interface -- Transfer */
#define function transfer(address, uint256) nonpayable returns ()
#define function transferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256, bytes) nonpayable returns ()

/* ERC721 Interface -- Allowance */
#define function getApproved(uint256) view returns (address)
#define function isApprovedForAll(address, address) view returns (uint256)
#define function approve(address, uint256) nonpayable returns ()
#define function setApprovalForAll(address, bool) nonpayable returns ()

/* ERC721 Interface -- Ownership */
#define function ownerOf(uint256) view returns (address)
#define function balanceOf(address) view returns (uint256)

/* ERC721 Interface -- Events */
#define event Transfer(address, address, uint256)
#define event Approval(address, address, uint256)
#define event ApprovalForAll(address, address, bool)

/* Storage Slots */
