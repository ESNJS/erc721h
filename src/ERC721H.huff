/// @title ERC721A
/// @author Philogy
/// @author bmwoolf
/// @notice A reusable base implementation of the ERC721A token contract written in Huff

/* Imports */
#include "./utils/HashMap.huff"
#include "./utils/Misc.huff"

/* ERC721 Interface */

/* ERC721 Interface -- Events */
#define event Transfer(address, address, uint256)
#define event Approval(address, address, uint256)
#define event ApprovalForAll(address, address, bool)

/* ERC721 Interface -- Metadata */
#define function name() view returns (string)
#define function symbol() view returns (string)
#define function tokenURI(uint256) view returns (string)
#define function totalSupply() view returns (uint256)

/* ERC721 Interface -- Transfer */
#define function transferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256, bytes) nonpayable returns ()
// added sigs as constants to avoid having to use __FUNC_SIG("...")
#define constant SIG_NO_DATA_SAFE_TRANSFER_FROM = 0x42842e0e
#define constant SIG_DATA_SAFE_TRANSFER_FROM = 0xb88d4fde

/* ERC721 Interface -- Allowance */
#define function getApproved(uint256) view returns (address)
#define function isApprovedForAll(address, address) view returns (uint256)
#define function approve(address, uint256) nonpayable returns ()
#define function setApprovalForAll(address, bool) nonpayable returns ()

/* ERC721 Interface -- Ownership */
#define function ownerOf(uint256) view returns (address)
#define function balanceOf(address) view returns (uint256)

/* ERC721 Interface -- Receiver */
#define function onERC721Received(address, address, uint256, bytes) nonpayable returns (bytes4)

/* ERC165 */
#define function supportsInterface(bytes4) view returns (bool)

/* ERC721H */
#define constant ERC721H__START_TOKEN_ID = 0x0


/* Storage Layout */

// _globalIndices.currentIndex (size: 64, offset:  0) - the next token ID to be minted
// _globalIndices.burnCounter  (size: 64, offset: 64) - global amount of tokens burnt
#define constant ERC721H__CURRENT_INDEX_MASK = 0xffffffffffffffff
#define constant ERC721H__BURN_COUNTER_MASK = 0xffffffffffffffff0000000000000000
#define constant ERC721H_SLOT__GLOBAL_INDICES = FREE_STORAGE_POINTER()

// _packedAddressData: mapping((account) => (aux, balance)) [keccak256(<slotConstant> . account)]
// _packedAddressData[].balance (size:  64, offset:  0) - how many tokens the address owns
// _packedAddressData[].aux     (size: 196, offset: 64) - arbitrary auxillary data
#define constant ERC721H_SLOT__PACKED_ADDRESS_DATA = FREE_STORAGE_POINTER()

// slotConstant = keccak256("erc721h.storageLayout._packedOwnerships")
// _packedOwnerships: mapping((tokenId) => (aux, burned, addr)) [<slotConstant> + tokenId]
// _packedOwnerships[].addr   (size: 160, offset:   0) - owner / 0 if minted in batch
// _packedOwnerships[].burned (size:   1, offset: 160) - 1 if token was already burnt
// _packedOwnerships[].aux    (size:  95, offset: 161) - arbitrary auxillary data
#define constant ERC721H_SLOT__OWNER_DATA = 0xc467d14b14f0170613c30fe1df235f316f42dc7d319044e13f083a1bdf2761b0

// _operatorApprovals: mapping((owner, operator) => (isApproved)) [keccak256(<slotConstant> . owner . operator)]
#define constant ERC721H_SLOT__OPERATOR_APPROVALS = FREE_STORAGE_POINTER()

// _tokenApprovals: mapping((tokenId) => (approvedAddr)) [keccak256(<slotConstant> . tokenId)]
#define constant ERC721H_SLOT__TOKEN_APPROVALS = FREE_STORAGE_POINTER()


// #define error MintZeroQuantity()
// #define error MintToZeroAddress()


#define macro MINT(zero, mem1, mem2) = takes(2) returns(3) {
  // takes:             [to, quantity]

  // -- check quantity > 0
  __FUNC_SIG(MintZeroQuantity) dup3 REQUIRE(<zero>) pop
  //                    [to, quantity]

  // -- check address != 0
  __FUNC_SIG(MintToZeroAddress) dup2 REQUIRE(<zero>) pop
  //                    [to, quantity]

  // -- update balance
  [ERC721H_SLOT__PACKED_ADDRESS_DATA] <mem1> mstore
  //                    [to, quantity]
  dup1 <mem2> mstore // [to, quantity]
  0x40 <mem1> sha3   // [address_data_slot, to, quantity]
  dup1 sload         // [address_data, address_data_slot, to, quantity]
  dup4 add           // [address_data', address_data_slot, to, quantity]
  swap1 sstore       // [to, quantity]

  // -- get and update current index (= first index in batch)
  [ERC721H_SLOT__GLOBAL_INDICES]
  //                    [glob_indices_slot, to, quantity]
  dup1 sload         // [glob_indices, glob_indices_slot, to, quantity]
  dup1 [ERC721H__CURRENT_INDEX_MASK] and
  //                    [currentIndex, glob_indices, glob_indices_slot, to, quantity]
  swap4 dup5 add     // [lastIndex_notMasked, glob_indices, glob_indices_slot, to, currentIndex]
  [ERC721H__CURRENT_INDEX_MASK] and
  //                    [lastIndex, glob_indices, glob_indices_slot, to, currentIndex]
  dup1 swap3         // [glob_indices, lastIndex, lastIndex, glob_indices_slot, to, currentIndex]
  [ERC721H__BURN_COUNTER_MASK] and
  //                    [burnCounter << 64, lastIndex, lastIndex, glob_indices_slot, to, currentIndex]
  or                 // [glob_indices', lastIndex, glob_indices_slot, to, currentIndex]
  swap1 swap3        // [glob_indices_slot, glob_indices', lastIndex, to, currentIndex]
  sstore             // [lastIndex, to, currentIndex]

  // -- save owner of tokens
  dup2               // [to, lastIndex, to, currentIndex]
  dup4 [ERC721H_SLOT__OWNER_DATA] add
  //                    [tokenSlot, to, lastIndex, to, currentIndex]
  sstore             // [lastIndex, to, currentIndex]
  swap2              // [currentIndex, to, lastIndex]

  // -- emit transfer events
  __ERC721__mintNextLoop:
  //                    [curTokenId, to, lastIndex]
    dup1 dup3 <zero> __EVENT_HASH(Transfer) <zero> <zero>
    //                  [0, 0, Transfer.sig, 0, to, curTokenId, curTokenId, to, lastIndex]
    log4             // [curTokenId, to, lastIndex]
    0x1 add          // [curTokenId + 1, to, lastIndex]
    dup2 dup3 sub    // [curTokenId + 1 != lastIndex, curTokenId + 1, to, lastIndex]
    __ERC721__mintNextLoop jumpi
  //                    [lastIndex, to, lastIndex]
}


#define macro ERC721H_CONSTRUCTOR() = takes(0) returns(0) {
  [START_TOKEN_ID] [SLOT_GLOBAL_INDICES] sstore // _currentIndex = START_TOKEN_ID
}

// only 13 methods but 16 possible bit sequences, gaps filled with continue label
#define jumptable __ERC721H__SELECTOR_TABLE {
  __ERC721H__selectorSwitchContinue // gap
  __ERC721H__getApproved
  __ERC721H__ownerOf
  __ERC721H__totalSupply
  __ERC721H__dataSafeTransferFrom
  __ERC721H__tokenURI
  __ERC721H__selectorSwitchContinue // gap
  __ERC721H__transferFrom
  __ERC721H__balanceOf
  __ERC721H__symbol
  __ERC721H__approve
  __ERC721H__setApprovalForAll
  __ERC721H__supportsInterface
  __ERC721H__name
  __ERC721H__isApprovedForAll
  __ERC721H__selectorSwitchContinue // gap
}

/**
 * TODO: Future macro args name, symbol, tokenURI, supportsInterface
 * @dev the 13 ERC721 methods each have a unique 4-bit sequence 10 bits in
 * which is used for the constant lookup in the jump table
 */
#define macro ERC721H_SELECTOR_SWITCH(name, symbol, tokenURI) = takes(1) returns(1) {
  // takes:         [selector]
  dup1 [SIG_NO_DATA_SAFE_TRANSFER_FROM] eq __ERC721H__noDataSafeTransferFrom jumpi
  //                [selector]
  0x20           // [0x20, selector]
  // needs to be multiplied by 32 (<< 5) for table offset
  // >> 10; << 5; simplifies to >> 5
  dup2 0x5 shr   // [selector >> 5, 0x20 selector]
  // 4-bit mask shift left 5 to meet selector
  0x1e0 and      // [table_offset, 0x20, selector]
  __tablestart(__ERC721H__SELECTOR_TABLE) add
  //                [code_offset, 0x20, selector]
  returndatasize // [0x0, code_offset, 0x20, selector]
  codecopy       // [selector]
  returndatasize // [0x0, selector]
  mload jump     // [selector]

  __ERC721H__noDataSafeTransferFrom:

  // direct signature comparison to check for collisions, necessary for this
  // switch to be used with more methods
  __ERC721H__getApproved:
    dup1 __FUNC_SIG(getApproved) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__ownerOf:
    dup1 __FUNC_SIG(ownerOf) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__totalSupply:
    dup1 __FUNC_SIG(totalSupply) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__dataSafeTransferFrom:
    dup1 [SIG_DATA_SAFE_TRANSFER_FROM] sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__tokenURI:
    dup1 __FUNC_SIG(tokenURI) sub __ERC721H__selectorSwitchContinue jumpi
    <tokenURI> jump
  __ERC721H__transferFrom:
    dup1 __FUNC_SIG(transferFrom) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__balanceOf:
    dup1 __FUNC_SIG(balanceOf) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__symbol:
    dup1 __FUNC_SIG(symbol) sub __ERC721H__selectorSwitchContinue jumpi
    <symbol> jump
  __ERC721H__approve:
    dup1 __FUNC_SIG(approve) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__setApprovalForAll:
    dup1 __FUNC_SIG(setApprovalForAll) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__supportsInterface:
    dup1 __FUNC_SIG(supportsInterface) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__name:
    dup1 __FUNC_SIG(name) sub __ERC721H__selectorSwitchContinue jumpi
    <name> jump
  __ERC721H__isApprovedForAll:
    dup1 __FUNC_SIG(isApprovedForAll) sub __ERC721H__selectorSwitchContinue jumpi

  __ERC721H__selectorSwitchContinue:
}

// TODO: Remove, only to appease compiler
#define macro MAIN() = takes(0) returns(0) {
  GET_SELECTOR()
  ERC721H_SELECTOR_SWITCH()
  returndatasize returndatasize revert
}

/* View functions */
#define macro BALANCE_OF() = takes (0) returns (0) {
    0x04 calldataload                                       // [account]
    [ERC721H_SLOT__OWNER_DATA] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance]
    0x00 mstore                                             // []
    0x20 0x00 return                                        // []
}

#define macro OWNER_OF() = takes (0) returns (0) {
    0x04 calldataload                               // [tokenId]
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}