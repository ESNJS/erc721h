/// @title ERC721A
/// @author Philogy <philippe@dumo.net>
/// @notice A reusable base implementation of the ERC721A token contract written in Huff

/* Imports */
#include "./utils/HashMap.huff"
#include "./utils/Misc.huff"

/* ERC721 Interface */

/* ERC721 Interface -- Events */
#define event Transfer(address indexed, address indexed, uint256 indexed)
#define event Approval(address indexed, address indexed, uint256 indexed)
#define event ApprovalForAll(address indexed, address indexed, bool)

/* ERC721 Interface -- Metadata */
#define function name() view returns (string)
#define function symbol() view returns (string)
#define function tokenURI(uint256) view returns (string)
#define function totalSupply() view returns (uint256)

/* ERC721 Interface -- Transfer */
#define function transferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256) nonpayable returns ()
#define function safeTransferFrom(address, address, uint256, bytes) nonpayable returns ()
// added sigs as constants to avoid having to use __FUNC_SIG("...")
#define constant SIG_NO_DATA_SAFE_TRANSFER_FROM = 0x42842e0e
#define constant SIG_DATA_SAFE_TRANSFER_FROM = 0xb88d4fde

/* ERC721 Interface -- Allowance */
#define function getApproved(uint256) view returns (address)
#define function isApprovedForAll(address, address) view returns (uint256)
#define function approve(address, uint256) nonpayable returns ()
#define function setApprovalForAll(address, bool) nonpayable returns ()

/* ERC721 Interface -- Ownership */
#define function ownerOf(uint256) view returns (address)
#define function balanceOf(address) view returns (uint256)

/* ERC721 Interface -- Receiver */
#define function onERC721Received(address, address, uint256, bytes) nonpayable returns (bytes4)

/* ERC165 */
#define function supportsInterface(bytes4) view returns (bool)

/* ERC721H */
#define constant ERC721H__START_TOKEN_ID = 0x0


/* Storage Layout */
#define constant MASK64 = 0xffffffffffffffff
#define constant NEG1 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff


// _globalIndices.currentIndex (size:  64, offset:   0) - the next token ID to be minted
// _globalIndices.burnCounter  (size:  64, offset:  64) - global amount of tokens burnt
// _globalIndices.extraData    (size: 128, offset: 128) - arbitrary auxillary data
#define constant ERC721H__NOT_CUR_INDEX_MASK = 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000
#define constant ERC721H_SLOT__GLOBAL_INDICES = FREE_STORAGE_POINTER()

// _packedAddressData: mapping((account) => (aux, balance)) [keccak256(<slotConstant> || account)]
// _packedAddressData[].balance (size:  64, offset:  0) - how many tokens the address owns
// _packedAddressData[].aux     (size: 196, offset: 64) - arbitrary auxillary data
// Slot constant is onERC721Received selector to minimize necessary mstores
#define constant ERC721H_SLOT__PACKED_ADDRESS_DATA = 0x150b7a02

// slotConstant = keccak256("erc721h.storageLayout._packedOwnerships")
// _packedOwnerships: mapping((token_id) => (aux, burned, addr)) [<slotConstant> + token_id]
// _packedOwnerships[].addr   (size: 160, offset:   0) - owner / 0 if minted in batch
// _packedOwnerships[].burned (size:   1, offset: 160) - if token was already burnt
// _packedOwnerships[].aux    (size:  95, offset: 161) - arbitrary auxillary data
#define constant ERC721H__BURNED_MASK = 0x10000000000000000000000000000000000000000
#define constant ERC721H_SLOT__OWNER_DATA = 0xc467d14b14f0170613c30fe1df235f316f42dc7d319044e13f083a1bdf2761b0

// _operatorApprovals: mapping((owner, operator) => (isApproved)) [keccak256(<slotConstant> . owner . operator)]
#define constant ERC721H_SLOT__OPERATOR_APPROVALS = FREE_STORAGE_POINTER()

// slotConstant = keccak256("erc721h.storageLayout._tokenApprovals")
// _tokenApprovals: mapping((token_id) => (approvedAddr)) [<slotConstant> + token_id]
#define constant ERC721H_SLOT__TOKEN_APPROVALS = 0x62b148735602bc106b11fdd0c804fa886d55bf94ee772f275741dfa7c159ab42

/* View functions */
#define macro __ERC721H__BALANCE_OF() = takes (0) returns (0) {
  NO_VALUE_CHECK(returndatasize)
  [ERC721H_SLOT__PACKED_ADDRESS_DATA] callvalue mstore
  0x04 calldataload   // [account]
  dup1 REQUIRE_ADDR(callvalue)
  //                     [account]
  0x20 mstore         // []
  0x40 callvalue sha3 // [address_data_slot]
  sload               // [address_data]
  [MASK64] and        // [balance]
  RETURN1(callvalue)
}

#define macro __ERC721H__TOTAL_SUPPLY() = takes(0) returns(0) {
  NO_VALUE_CHECK(returndatasize)
  [ERC721H__START_TOKEN_ID]            // [startTokenId]
  [ERC721H_SLOT__GLOBAL_INDICES] sload // [globalIndices, startTokenId]
  [MASK64]                             // [mask64, globalIndices, startTokenId]
  dup1 dup3 0x40 shr and               // [burnCounter, mask64, globalIndices, startTokenId]
  swap2 and                            // [currentIndex, burnCounter, startTokenId]
  sub sub                              // [totalSupply]
  RETURN1(callvalue)
}

#define macro __ERC721H__SET_APPROVAL_FOR_ALL() = takes(0) returns(0) {
  NO_VALUE_CHECK(returndatasize)
  0x04 calldataload // [operator]
  dup1 REQUIRE_ADDR(callvalue)
  //                   [operator]
  0x24 calldataload // [isApproved, operator]
  dup1              // [isApproved, isApproved, operator]
  // check if boolean
  dup1 dup1 0x1 and // [isApproved & 1, isApproved, isApproved, isApproved, operator]
  eq REQUIRE_NO_SIG(callvalue)
  //                   [isApproved, isApproved, operator]
  [ERC721H_SLOT__OPERATOR_APPROVALS] callvalue mstore
  caller 0x20 mstore
  dup3 0x40 mstore  // [isApproved, isApproved, operator]
  0x60 callvalue sha3
  //                   [_operatorApprovals.slot, isApproved, isApproved, operator]
  sstore //            [isApproved, operator]
  callvalue mstore //  [operator]
  caller __EVENT_HASH(ApprovalForAll)
  //                   [ApprovalForAll.sig, msg.sender, operator]
  0x20 callvalue log3
  stop
}

#define macro __ERC721H__IS_APPROVED_FOR_ALL() = takes(0) returns(0) {
  NO_VALUE_CHECK(returndatasize)
  [ERC721H_SLOT__OPERATOR_APPROVALS] callvalue mstore
  0x04 calldataload            // [owner]
  dup1 REQUIRE_ADDR(callvalue) // [owner]
  0x24 calldataload            // [operator, owner]
  dup1 REQUIRE_ADDR(callvalue) // [operator, owner]
  0x40 mstore                  // [owner]
  0x20 mstore                  // []
  0x60 callvalue sha3 sload    // [approval]
  RETURN1(callvalue)
}

#define error OwnerQueryForNonexistentToken()

#define macro ERC721H__GET_PACKED_OWNERSHIP() = takes(1) returns(2) {
  // takes:     [initial_owner_data_slot]
  dup1 sload // [owner_data, initial_owner_data_slot]
  dup1 __ERC721H__getOwnerDataEnd jumpi
  __ERC721H__getOwnerDataContinue:
  //            [prev_owner_data, prev_owner_data_slot]
  pop        // [prev_owner_data_slot]
  [NEG1] add // [new_owner_data_slot]
  dup1 sload // [new_owner_data, new_owner_data_slot]
  dup1 iszero __ERC721H__getOwnerDataContinue jumpi

  __ERC721H__getOwnerDataEnd:
  //            [owner_data, owner_data_slot]
}

#define macro ERC721H__GET_PACKED_OWNERSHIP_SAFE(zero) = takes(1) returns(2) {
  // takes:                         [token_id]

  // TODO: Replace once compiler fixed
  0xdf2d9b42 // __FUNC_SIG(OwnerQueryForNonexistentToken)
  //                                [error_sig, token_id]
  [ERC721H__START_TOKEN_ID] dup3 // [token_id, startTokenId, error_sig, token_id]
  lt iszero REQUIRE(<zero>)      // [error_sig, token_id]
  [ERC721H_SLOT__GLOBAL_INDICES] sload
  //                                [glob_indices, error_sig, token_id]
  [MASK64] and                   // [currentIndex, error_sig, token_id]
  dup3 lt REQUIRE(<zero>) pop    // [token_id]
  [ERC721H_SLOT__OWNER_DATA] add // [direct_owner_data_slot]
  ERC721H__GET_PACKED_OWNERSHIP()
  //                                [owner_data, owner_data_slot]
  // TODO: Replace once compiler fixed
  0xdf2d9b42 // __FUNC_SIG(OwnerQueryForNonexistentToken)
  //                                [error_sig, owner_data, owner_data_slot]
  dup2 [ERC721H__BURNED_MASK] and
  //                                [burned_flag << 160, error_sig, owner_data, owner_data_slot]
  iszero REQUIRE(<zero>)         // [error_sig, owner_data, owner_data_slot]
  pop                            // [owner_data, owner_data_slot]

  // returns:                       [owner_data, owner_data_slot]
}

#define macro __ERC721H__OWNER_OF() = takes(0) returns(0) {
  NO_VALUE_CHECK(returndatasize)
  0x4 calldataload                    // [token_id]
  ERC721H__GET_PACKED_OWNERSHIP_SAFE(callvalue)
  [MASK_ADDR] and                     // [owner, orig_data_slot]
  RETURN1(callvalue)
}

#define error ApprovalCallerNotOwnerNorApproved()

#define macro __ERC721H__APPROVE() = takes(0) returns(0) {
  NO_VALUE_CHECK(returndatasize)
  0x24 calldataload dup1    // [token_id, token_id]
  ERC721H__GET_PACKED_OWNERSHIP_SAFE(callvalue)
  //                           [owner_data, owner_data_slot, token_id]
  [MASK_ADDR] and           // [owner, owner_data_slot, token_id]
  dup1 caller eq            // [owner == msg.sender, owner, owner_data_slot, token_id]
  __ERC721H__approveAuthConfirm jumpi
    //                         [owner, owner_data_slot, token_id]
    [ERC721H_SLOT__OPERATOR_APPROVALS] callvalue mstore
    //                         [owner, owner_data_slot, token_id]
    dup1 0x20 mstore        // [owner, owner_data_slot, token_id]
    caller 0x40 mstore      // [owner, owner_data_slot, token_id]
    caller 0x40 mstore      // [owner, owner_data_slot, token_id]
    0x60 callvalue sha3     // [approved_for_all_slot, owner, owner_data_slot, token_id]
    sload                   // [approved_for_all, owner, owner_data_slot, token_id]
  __ERC721H__approveAuthConfirm jumpi
    // TODO: Replace once compiler fixed
    0xcfb3b942 // __FUNC_SIG(ApprovalCallerNotOwnerNorApproved)
    REVERT_SIG(callvalue)
  __ERC721H__approveAuthConfirm:
    //                         [owner, owner_data_slot, token_id]
  0x04 calldataload         // [to, owner, owner_data_slot, token_id]
  dup1 REQUIRE_ADDR(callvalue)
  //                           [to, owner, owner_data_slot, token_id]
  swap1 dup2                // [to, owner, to, owner_data_slot, token_id]
  dup5 swap2                // [owner, to, token_id, to, owner_data_slot, token_id]
  __EVENT_HASH(Approval)    // [Approval.sig, owner, to, token_id, to, owner_data_slot, token_id]
  callvalue callvalue log4  // [to, owner_data_slot, token_id]
  swap1 swap2               // [token_id, to, owner_data_slot]
  [ERC721H_SLOT__TOKEN_APPROVALS] add
  //                           [approval_slot, to, owner_data_slot]
  sstore
  stop
}

#define error ApprovalQueryForNonexistentToken()

#define macro __ERC721H__IS_APPROVED() = takes(0) returns(0) {
  NO_VALUE_CHECK(returndatasize)

  0x04 calldataload              // [token_id]
  // __FUNC_SIG(ApprovalQueryForNonexistentToken)
  0xcf4700e4
  //                                [error_sig, token_id]
  [ERC721H__START_TOKEN_ID] dup3 // [token_id, startTokenId, error_sig, token_id]
  lt iszero REQUIRE(callvalue)      // [error_sig, token_id]
  [ERC721H_SLOT__GLOBAL_INDICES] sload
  //                                [glob_indices, error_sig, token_id]
  [MASK64] and                   // [currentIndex, error_sig, token_id]
  dup3 lt REQUIRE(callvalue)        // [error_sig, token_id]
  [ERC721H_SLOT__OWNER_DATA]     // [owner_data_slot_offset, error_sig, token_id]
  dup3 add sload                 // [direct_token_owner_data, error_sig, token_id]
  [ERC721H__BURNED_MASK] and     // [burned_flag << 160, error_sig, token_id]
  iszero REQUIRE(callvalue) pop     // [token_id]

  [ERC721H_SLOT__TOKEN_APPROVALS] add
  //                                [token_approval_slot]
  sload RETURN1(callvalue)
}

#define macro __ERC721H__MINT_EVENT_LOOP(zero) = takes(3) returns(2) {
  // takes: [curTokenId, to, lastIndex]

  __ERC721H__mintNextLoop:
  //                    [curTokenId, to, lastIndex]
    dup1 dup3 <zero> __EVENT_HASH(Transfer) <zero> <zero>
    //                  [0, 0, Transfer.sig, 0, to, curTokenId, curTokenId, to, lastIndex]
    log4             // [curTokenId, to, lastIndex]
    0x1 add          // [curTokenId + 1, to, lastIndex]
    dup3 dup2 sub    // [curTokenId + 1 != lastIndex, curTokenId + 1, to, lastIndex]
    __ERC721H__mintNextLoop jumpi
  pop
  //                    [to, lastIndex]
}

#define error MintZeroQuantity()
#define error MintToZeroAddress()

// TODO: take aux owner  token data
#define macro ERC721H__MINT(zero, mem1, mem2) = takes(2) returns(2) {
  // takes:             [to, quantity]

  // -- check quantity > 0
  __FUNC_SIG(MintZeroQuantity) dup3 REQUIRE(<zero>) pop
  //                    [to, quantity]

  // -- check address != 0
  __FUNC_SIG(MintToZeroAddress) dup2 REQUIRE(<zero>) pop
  //                    [to, quantity]

  // -- update balance
  [ERC721H_SLOT__PACKED_ADDRESS_DATA] <mem1> mstore
  //                    [to, quantity]
  dup1 <mem2> mstore // [to, quantity]
  0x40 <mem1> sha3   // [address_data_slot, to, quantity]
  dup1 sload         // [address_data, address_data_slot, to, quantity]
  dup4 add           // [address_data', address_data_slot, to, quantity]
  swap1 sstore       // [to, quantity]

  // -- get and update current index (= first index in batch)
  [ERC721H_SLOT__GLOBAL_INDICES]
  //                    [glob_indices_slot, to, quantity]
  dup1 sload         // [glob_indices, glob_indices_slot, to, quantity]
  dup1 [MASK64] and
  //                    [currentIndex, glob_indices, glob_indices_slot, to, quantity]
  swap4 dup5 add     // [lastIndex_notMasked, glob_indices, glob_indices_slot, to, currentIndex]
  [MASK64] and
  //                    [lastIndex, glob_indices, glob_indices_slot, to, currentIndex]
  dup1 swap2         // [glob_indices, lastIndex, lastIndex, glob_indices_slot, to, currentIndex]
  [ERC721H__NOT_CUR_INDEX_MASK] and
  //                    [global_indices \ currentIndex, lastIndex, lastIndex, glob_indices_slot, to, currentIndex]
  or                 // [glob_indices', lastIndex, glob_indices_slot, to, currentIndex]
  swap1 swap2        // [glob_indices_slot, glob_indices', lastIndex, to, currentIndex]
  sstore             // [lastIndex, to, currentIndex]

  // -- save owner of tokens
  dup2               // [to, lastIndex, to, currentIndex]
  dup4 [ERC721H_SLOT__OWNER_DATA] add
  //                    [tokenSlot, to, lastIndex, to, currentIndex]
  sstore             // [lastIndex, to, currentIndex]
  swap2              // [currentIndex, to, lastIndex]

  // -- emit transfer events
  __ERC721H__MINT_EVENT_LOOP(<zero>)

  //                    [to, lastIndex]
}


#define error TransferToNonERC721ReceiverImplementer()
#define error AttemptedSafeMintReentrancy()
// TODO: take aux owner  token data
/*
 * @dev mints tokens doing the ERC721 recipient check with empty data
 * @dev assumes memory[mem3] = 0; memory[mem5] = 0x80; memory[mem6] = 0
*/
#define macro ERC721H__SAFE_MINT(zero, mem1, mem1_1c, mem2, mem4) = takes (2) returns (3) {
  // takes:             [to, quantity]

  // -- check quantity > 0
  __FUNC_SIG(MintZeroQuantity) dup3 REQUIRE(<zero>) pop
  //                    [to, quantity]

  // -- check address != 0
  __FUNC_SIG(MintToZeroAddress) dup2 REQUIRE(<zero>) pop
  //                    [to, quantity]

  // -- update balance
  [ERC721H_SLOT__PACKED_ADDRESS_DATA] <mem1> mstore
  //                    [to, quantity]
  dup1 <mem2> mstore // [to, quantity]
  0x40 <mem1> sha3   // [address_data_slot, to, quantity]
  dup1 sload         // [address_data, address_data_slot, to, quantity]
  dup4 add           // [address_data', address_data_slot, to, quantity]
  swap1 sstore       // [to, quantity]

  // -- get and update current index (= first index in batch)
  [ERC721H_SLOT__GLOBAL_INDICES]
  //                    [glob_indices_slot, to, quantity]
  dup1 sload         // [glob_indices, glob_indices_slot, to, quantity]
  dup1 [MASK64] and
  //                    [currentIndex, glob_indices, glob_indices_slot, to, quantity]
  swap4 dup5 add     // [lastIndex_notMasked, glob_indices, glob_indices_slot, to, currentIndex]
  [MASK64] and
  //                    [lastIndex, glob_indices, glob_indices_slot, to, currentIndex]
  dup1 swap2         // [glob_indices, lastIndex, lastIndex, glob_indices_slot, to, currentIndex]
  [ERC721H__NOT_CUR_INDEX_MASK] and
  //                    [global_indices \ currentIndex, lastIndex, lastIndex, glob_indices_slot, to, currentIndex]
  or                 // [glob_indices', lastIndex, glob_indices_slot, to, currentIndex]
  swap1 swap2        // [glob_indices_slot, glob_indices', lastIndex, to, currentIndex]
  sstore             // [lastIndex, to, currentIndex]

  // -- save owner of tokens
  dup2               // [to, lastIndex, to, currentIndex]
  dup4 [ERC721H_SLOT__OWNER_DATA] add
  //                    [tokenSlot, to, lastIndex, to, currentIndex]
  sstore             // [lastIndex, to, currentIndex]
  swap2              // [currentIndex, to, lastIndex]

  // -- prepare receive check data
  caller <mem2> mstore // operator = msg.sender
  //                    [currentIndex, to, lastIndex]

  // -- check whether receive check
  dup2 extcodesize //   [to.codesize, curTokenId, to, lastIndex]
  __ERC721H__safeMintReceiveCheckingLoop jumpi
  //                    [curTokenId, to, lastIndex]

    __ERC721H__MINT_EVENT_LOOP(<zero>)
    //                  [to, lastIndex]
  __ERC721H__safeMintContinue jump
  __ERC721H__safeMintReceiveCheckingLoop:

    __ERC721H__safeMintNextLoop:
    //                  [curTokenId, to, lastIndex]
      dup1 dup3 <zero> __EVENT_HASH(Transfer) <zero> <zero>
      //                [0, 0, Transfer.sig, 0, to, curTokenId, curTokenId, to, lastIndex]
      log4 //           [curTokenId, to, lastIndex]

      // __FUNC_SIG(TransferToNonERC721ReceiverImplementer())
      0xd1a57ed6 // push correct sig while bug
      dup2 <mem4> mstore
      //                [error_sig, curTokenId, to, lastIndex]
      0x04 <mem1_1c> 0xa4 <mem1_1c> <zero> dup8 gas call
      //                [suc, error_sig, curTokenId, to, lastIndex]
      __FUNC_SIG(onERC721Received)
      //                [onERC721Received.sig, suc, error_sig, curTokenId, to, lastIndex]
      <mem1> mload eq
      //                [ret == expec, suc, error_sig, curTokenId, to, lastIndex]
      and REQUIRE(<zero>) pop

      //                [curTokenId, to, lastIndex]
      0x1 add //        [curTokenId + 1, to, lastIndex]
      dup3 dup2 sub //  [curTokenId + 1 != lastIndex, curTokenId + 1, to, lastIndex]
    __ERC721H__safeMintNextLoop jumpi
    //                  [lastIndex, to, lastIndex]

    // -- reentrancy protection
    __FUNC_SIG(AttemptedSafeMintReentrancy) swap1
    //                  [lastIndex, error_sig, to, lastIndex]
    [ERC721H_SLOT__GLOBAL_INDICES] sload [MASK64] and
    //                  [currentIndex, lastIndex, error_sig, to, lastIndex]
    eq REQUIRE(<zero>) pop
    //                  [to, lastIndex]

  __ERC721H__safeMintContinue:
  //                    [to, lastIndex]
}

#define macro ERC721H_CONSTRUCTOR() = takes(0) returns(0) {
  [ERC721H__START_TOKEN_ID] [ERC721H_SLOT__GLOBAL_INDICES] sstore // _currentIndex = START_TOKEN_ID
}

// only 13 methods but 16 possible bit sequences, gaps filled with continue label
#define jumptable __ERC721H__SELECTOR_TABLE {
  __ERC721H__totalSupply
  __ERC721H__getApproved
  __ERC721H__ownerOf
  __ERC721H__selectorSwitchContinue // gap
  __ERC721H__dataSafeTransferFrom
  __ERC721H__tokenURI
  __ERC721H__selectorSwitchContinue // gap
  __ERC721H__transferFrom
  __ERC721H__balanceOf
  __ERC721H__symbol
  __ERC721H__approve
  __ERC721H__setApprovalForAll
  __ERC721H__supportsInterface
  __ERC721H__name
  __ERC721H__isApprovedForAll
  __ERC721H__selectorSwitchContinue // gap
}

/**
 * TODO: Future macro args name, symbol, tokenURI, supportsInterface
 * @dev 13 ERC721 methods each have a unique 4-bit sequence 12 bits in
 * which is used for the constant lookup in the jump table
 */
#define macro ERC721H_SELECTOR_SWITCH(name, symbol, tokenURI) = takes(1) returns(1) {
  // takes:         [selector]
  dup1 [SIG_NO_DATA_SAFE_TRANSFER_FROM] eq __ERC721H__noDataSafeTransferFrom jumpi
  //                [selector]
  0x20           // [0x20, selector]
  // needs to be multiplied by 32 (<< 5) for table offset
  // >> 12; << 5; simplifies to >> 7
  dup2 0x7 shr   // [selector >> 7, 0x20 selector]
  // 4-bit mask shift left 7 to meet selector
  0x1e0 and      // [table_offset, 0x20, selector]
  __tablestart(__ERC721H__SELECTOR_TABLE) add
  //                [code_offset, 0x20, selector]
  returndatasize // [0x0, code_offset, 0x20, selector]
  codecopy       // [selector]
  returndatasize // [0x0, selector]
  mload jump     // [selector]

  __ERC721H__noDataSafeTransferFrom:

  // direct signature comparison to check for collisions, necessary for this
  // switch to be used with more methods
  __ERC721H__getApproved:
    dup1 __FUNC_SIG(getApproved) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__IS_APPROVED()
  __ERC721H__ownerOf:
    dup1 __FUNC_SIG(ownerOf) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__OWNER_OF()
  __ERC721H__totalSupply:
    dup1 __FUNC_SIG(totalSupply) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__TOTAL_SUPPLY()
  __ERC721H__dataSafeTransferFrom:
    dup1 [SIG_DATA_SAFE_TRANSFER_FROM] sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__tokenURI:
    dup1 __FUNC_SIG(tokenURI) sub __ERC721H__selectorSwitchContinue jumpi
    <tokenURI> jump
  __ERC721H__transferFrom:
    dup1 __FUNC_SIG(transferFrom) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__balanceOf:
    dup1 __FUNC_SIG(balanceOf) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__BALANCE_OF()
  __ERC721H__symbol:
    dup1 __FUNC_SIG(symbol) sub __ERC721H__selectorSwitchContinue jumpi
    <symbol> jump
  __ERC721H__approve:
    dup1 __FUNC_SIG(approve) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__APPROVE()
  __ERC721H__setApprovalForAll:
    dup1 __FUNC_SIG(setApprovalForAll) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__SET_APPROVAL_FOR_ALL()
  __ERC721H__supportsInterface:
    dup1 __FUNC_SIG(supportsInterface) sub __ERC721H__selectorSwitchContinue jumpi
  __ERC721H__name:
    dup1 __FUNC_SIG(name) sub __ERC721H__selectorSwitchContinue jumpi
    <name> jump
  __ERC721H__isApprovedForAll:
    dup1 __FUNC_SIG(isApprovedForAll) sub __ERC721H__selectorSwitchContinue jumpi
    __ERC721H__IS_APPROVED_FOR_ALL()

  __ERC721H__selectorSwitchContinue:
}
